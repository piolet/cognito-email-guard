service: cognito-email-guard
frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  logRetentionInDays: 14
  region: eu-west-3
  stage: ${opt:stage, 'dev'}
  environment:
    DATABASE_URL: ${env:DATABASE_URL, ssm:/heustach-${sls:stage}/database-url}
#    DB_PORT: ${env:DB_PORT, '3306'}
#    DB_USER: ${env:DB_USER}
#    DB_PASSWORD: ${env:DB_PASSWORD}
#    DB_NAME: ${env:DB_NAME}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
#      statements:
#        # Autoriser Cognito Update c√¥t√© admin pour l‚Äôendpoint de changement d'email
#        - Effect: Allow
#          Action:
#            - cognito-idp:AdminUpdateUserAttributes
#            - cognito-idp:AdminGetUser
#          Resource:
#            - arn:aws:cognito-idp:${self:provider.region}:*:userpool/${env:USER_POOL_ID}

functions:
  customMessage:
    handler: src/triggers/customMessage.handler
    description: Personnalise tous les e-mails Cognito (signup, resend, forgot, etc.)
    memorySize: 256
    timeout: 5
  preTokenGen:
    handler: src/triggers/preTokenGen.handler
    description: Ajoute des attributs personnalis√©s dans le token JWT
    memorySize: 256
    timeout: 5
  preSignUp:
    handler: src/triggers/preSignUp.handler
    description: V√©rifie l'unicit√© de l'adresse e-mail avant inscription (spam email)
    memorySize: 256
    timeout: 5

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}
        UsernameAttributes: [ email ]
        AutoVerifiedAttributes: [ email ]
        Schema:
          - Name: usr_id
            AttributeDataType: Number
            Mutable: true
          - Name: roles
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints: { MaxLength: "2048" } # pour JSON
          - Name: firstName
            AttributeDataType: String
            Mutable: true
          - Name: lastName
            AttributeDataType: String
            Mutable: true
        LambdaConfig:
          PreSignUp: !GetAtt PreSignUpLambdaFunction.Arn  # nom logique auto-g√©n√©r√©: <FunctionName>LambdaFunction
          PreTokenGeneration: !GetAtt PreTokenGenLambdaFunction.Arn
          CustomMessage: !GetAtt CustomMessageLambdaFunction.Arn
        EmailConfiguration:
          # Active l'envoi via ton compte SES (pr√©requis: domaine/adresse v√©rifi√©s dans SES)
          EmailSendingAccount: DEVELOPER
          From: "Heustach ü•∏ <no-reply@${self:custom.email-domain}>"
          SourceArn: arn:aws:ses:${aws:region}:${aws:accountId}:identity/${self:custom.email-domain}
        # Message "par d√©faut" (backup) si le trigger est d√©sactiv√©
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
          EmailSubject: "Votre code Heustach"
          EmailMessage: "Voici votre code: {####}"
          EmailMessageByLink: "Cliquez pour confirmer votre adresse: {##Click Here##}"
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true

    # Autoriser Cognito √† invoquer la Lambda de preSignUp
    PreSignUpPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: [ PreSignUpLambdaFunction, Arn ]
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn:
          Fn::GetAtt: [ UserPool, Arn ]
    # Autoriser Cognito √† invoquer la Lambda de preTokenGen
    PreTokenGenPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: [ PreTokenGenLambdaFunction, Arn ]
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn:
          Fn::GetAtt: [ UserPool, Arn ]

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId: !Ref UserPool
        GenerateSecret: false
#        ReadAttributes:
#          - email
#          - given_name
#          - family_name
#          - phone_number
#          - custom:usr_id
#          - custom:roles
#          - custom:firstName
#          - custom:lastName
#        WriteAttributes:
#          - email
#          - custom:usr_id
#          - custom:roles
#          - custom:firstName
#          - custom:lastName
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        SupportedIdentityProviders: [ COGNITO ]
        PreventUserExistenceErrors: ENABLED
        CallbackURLs:
          - https://example.com/callback     # adapte
        LogoutURLs:
          - https://example.com/logout       # adapte
        AllowedOAuthFlowsUserPoolClient: false

  Outputs:
    UserPoolId:
      Value: !Ref UserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-UserPoolId
    UserPoolClientId:
      Value: !Ref UserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-UserPoolClientId

plugins:
  - serverless-esbuild
  - serverless-prune-plugin
  - serverless-stack-termination-protection
  - serverless-offline

custom: ${file(./config/${opt:stage, 'dev'}.yml)}
