service: cognito-email-guard
frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  logRetentionInDays: 14
  region: eu-west-3
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
#            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:*
            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/cognito-email-guard/${sls:stage}/message/*
        - Effect: Allow
          Action:
            - cognito-idp:AdminUpdateUserAttributes
          # (facultatif) si tu veux utiliser aussi les groupes :
          # - cognito-idp:AdminAddUserToGroup
          Resource: arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/*
#      statements:
#        # Autoriser Cognito Update côté admin pour l’endpoint de changement d'email
#        - Effect: Allow
#          Action:
#            - cognito-idp:AdminUpdateUserAttributes
#            - cognito-idp:AdminGetUser
#          Resource:
#            - arn:aws:cognito-idp:${self:provider.region}:*:userpool/${env:USER_POOL_ID}

functions:
  customMessage:
    handler: src/triggers/customMessage.handler
    description: Personnalise tous les e-mails Cognito (signup, resend, forgot, etc.)
    memorySize: 256
    timeout: 5
  preTokenGen:
    handler: src/triggers/preTokenGen.handler
    description: Ajoute des attributs personnalisés dans le token JWT
    memorySize: 256
    timeout: 5
    environment:
      DATABASE_URL: ${self:custom.database-url}
  preSignUp:
    handler: src/triggers/preSignUp.handler
    description: Vérifie l'unicité de l'adresse e-mail avant inscription (spam email)
    memorySize: 256
    timeout: 5
    environment:
      DATABASE_URL: ${self:custom.database-url}
  userMigration:
    handler: src/triggers/userMigration.handler
    description: Migration à la volée des utilisateurs (auth/forgot)
    memorySize: 2048
    timeout: 15
    environment:
      DATABASE_URL: ${self:custom.database-url}
  postConfirmation:
    handler: src/triggers/postConfirmation.handler
    memorySize: 256
    timeout: 10
    environment:
      DATABASE_URL: ${self:custom.database-url}
      API_URL: ${self:custom.protocol}://api.${self:custom.domain}

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}
        UsernameAttributes: [ email ]
        AutoVerifiedAttributes: [ email, phone_number ]
        Schema:
          - Name: id
            AttributeDataType: String
            Mutable: true
          - Name: roles
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints: { MaxLength: "2048" } # pour JSON
          - Name: firstName
            AttributeDataType: String
            Mutable: true
          - Name: lastName
            AttributeDataType: String
            Mutable: true
          - Name: userType
            AttributeDataType: String
            Mutable: true
          - Name: newsletterSubscribed
            AttributeDataType: String
            Mutable: true
          - Name: cguAccepted
            AttributeDataType: String
            Mutable: true
        LambdaConfig:
          PreSignUp: !GetAtt PreSignUpLambdaFunction.Arn
          PreTokenGeneration: !GetAtt PreTokenGenLambdaFunction.Arn
          CustomMessage: !GetAtt CustomMessageLambdaFunction.Arn
          UserMigration: !GetAtt UserMigrationLambdaFunction.Arn
          PostConfirmation: !GetAtt PostConfirmationLambdaFunction.Arn
        EmailConfiguration:
          # Active l'envoi via ton compte SES (prérequis: domaine/adresse vérifiés dans SES)
          EmailSendingAccount: DEVELOPER
          From: "Heustach {self:custom.emoji} <no-reply@${self:custom.email-domain}>"
          SourceArn: arn:aws:ses:${aws:region}:${aws:accountId}:identity/${self:custom.email-domain}
        SmsConfiguration:
          SnsCallerArn: !GetAtt CognitoSMSRole.Arn
          ExternalId: ${self:service}-${self:provider.stage}-sms
        # Message "par défaut" (backup) si le trigger est désactivé
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
          EmailSubject: "Votre code Heustach"
          EmailMessage: "Voici votre code: {####}"
          EmailMessageByLink: "Cliquez pour confirmer votre adresse: {##Click Here##}"
          SmsMessage: "Votre code Heustach: {####}"
        # (optionnel) message SMS pour authentification/MFA
        SmsAuthenticationMessage: "Votre code de connexion Heustach: {####}"
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true

    # Rôle IAM que Cognito assume pour envoyer des SMS via SNS
    CognitoSMSRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-cognito-sms
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: cognito-idp.amazonaws.com
              Action: sts:AssumeRole
              Condition:
                StringEquals:
                  sts:ExternalId: ${self:service}-${self:provider.stage}-sms
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-cognito-sms-publish
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: [ "sns:Publish" ]
                  Resource: "*"

    # Autoriser Cognito à invoquer la Lambda de preSignUp
    PreSignUpPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt PreSignUpLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn
    # Autoriser Cognito à invoquer la Lambda de preTokenGen
    PreTokenGenPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt PreTokenGenLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn
    # Autoriser Cognito à invoquer la Lambda de customisation des messages
    CustomMessagePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt CustomMessageLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn
    UserMigrationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt UserMigrationLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn
    PostConfirmationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt PostConfirmationLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId: !Ref UserPool
        GenerateSecret: false
#        ReadAttributes:
#          - email
#          - given_name
#          - family_name
#          - phone_number
#          - custom:id
#          - custom:roles
#          - custom:firstName
#          - custom:lastName
#        WriteAttributes:
#          - email
#          - custom:id
#          - custom:roles
#          - custom:firstName
#          - custom:lastName
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        SupportedIdentityProviders: [ COGNITO ]
        PreventUserExistenceErrors: ENABLED
        CallbackURLs:
          - https://example.com/callback     # adapte
        LogoutURLs:
          - https://example.com/logout       # adapte
        AllowedOAuthFlowsUserPoolClient: false

  Outputs:
    UserPoolId:
      Value: !Ref UserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-UserPoolId
    UserPoolClientId:
      Value: !Ref UserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-UserPoolClientId

plugins:
  - serverless-esbuild
  - serverless-prune-plugin
  - serverless-stack-termination-protection
  - serverless-offline

custom: ${file(./config/${opt:stage, 'dev'}.yml)}
